name: KloneKit CI/CD

#
# TRIGGERS
#
on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allow manual triggering

#
# PERMISSIONS
#
permissions:
  contents: write # To create releases
  pages: write    # To deploy to GitHub Pages
  id-token: write # To authenticate with GitHub Pages

#
# JOBS
#
jobs:
  # ----------------------------------------------------------------
  # LINT: Ensure code quality and style consistency.
  # ----------------------------------------------------------------
  lint:
    name: Lint Codebase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.8

  # ----------------------------------------------------------------
  # TEST: Run the full test suite.
  # ----------------------------------------------------------------
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - name: Run tests with coverage
        run: make test

  # ----------------------------------------------------------------
  # BUILD: Compile binaries for all target platforms.
  # ----------------------------------------------------------------
  build:
    name: Build Binaries
    needs: [lint, test]
    # Only run builds on tags or manual dispatch, not on regular pushes
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            binary-ext: ""
            artifact-name: "linux-amd64"
          - goos: darwin
            goarch: amd64
            binary-ext: ""
            artifact-name: "darwin-amd64"
          - goos: windows
            goarch: amd64
            binary-ext: ".exe"
            artifact-name: "windows-amd64"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="dev-$(date +%Y%m%d-%H%M%S)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          BINARY_NAME="klonekit-${{ steps.version.outputs.version }}-${{ matrix.artifact-name }}${{ matrix.binary-ext }}"
          go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o "$BINARY_NAME" ./cmd/klonekit
          echo "Built: $BINARY_NAME"
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: klonekit-${{ steps.version.outputs.version }}-${{ matrix.artifact-name }}
          path: klonekit-${{ steps.version.outputs.version }}-${{ matrix.artifact-name }}${{ matrix.binary-ext }}

  # ----------------------------------------------------------------
  # DEPLOY-DOCS: Deploy the documentation to GitHub Pages.
  # ----------------------------------------------------------------
  deploy-docs:
    name: Deploy Documentation
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install MkDocs dependencies
        run: |
          pip install -r user-docs/requirements.txt
      - name: Build documentation
        run: |
          cd user-docs
          mkdocs build --config-file mkdocs.yml
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v4
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./user-docs/site
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

  # ----------------------------------------------------------------
  # RELEASE: Create a GitHub Release when a tag is pushed.
  # ----------------------------------------------------------------
  release:
    name: Create GitHub Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            binaries/klonekit-${{ steps.version.outputs.version }}-linux-amd64/*
            binaries/klonekit-${{ steps.version.outputs.version }}-darwin-amd64/*
            binaries/klonekit-${{ steps.version.outputs.version }}-windows-amd64/*
